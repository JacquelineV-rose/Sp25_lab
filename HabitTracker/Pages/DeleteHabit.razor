@page "/edithabits/delete"
@inject HttpClient Http
@using HabitTracker.Models
@using HabitTracker.Loaders

<h2 class="text-2xl font-bold mb-6">Delete a Habit</h2>

<div class="max-w-2xl bg-white p-6 rounded shadow">
    @if (isLoading)
    {
        <LoadingScreen IsVisible="isLoading" />
    }
    else if (habits == null || !habits.Any())
    {
        <p>No habits found.</p>
    }
    else
    {
        <div class="max-h-64 overflow-y-auto border p-4 rounded shadow mb-4">
            <ul class="space-y-2">
                @foreach (var habit in habits)
                {
                    <li class="flex items-center space-x-4">
                        <input type="radio" id="@habit.Id" name="habitSelect" value="@habit.Id"
                               @onchange="() => selectedHabitId = habit.Id" />
                        <label for="@habit.Id" class="cursor-pointer">
                            <strong>@habit.Name</strong> - <span class="text-gray-600">@habit.Description</span>
                        </label>
                    </li>
                }
            </ul>
        </div>

        @* ✅ DELETE BUTTON inside the ELSE but before the closing brace *@
        <button style="background-color:red; color:white; font-size:20px; width:100%; margin-top:20px;"
                @onclick="DeleteHabitConfirmed"
                disabled="@(!IsHabitSelected || isLoading)">
            Delete Selected Habit
        </button>
    }  @* ✅ THIS closes the ELSE block cleanly *@
</div>

@code {
    private List<Habit> habits = new();
    private int selectedHabitId;
    private bool isLoading = true;

    [Inject] private IJSRuntime? JS { get; set; }
    [Inject] private NavigationManager? Navigation { get; set; }
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        var token = await JS!.InvokeAsync<string>("sessionStorage.getItem", "authToken");

        if (string.IsNullOrEmpty(token))
        {
            Navigation?.NavigateTo("/LoginRegAuth/login", forceLoad: true);
            return;
        }

        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "api/habits");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                habits = await response.Content.ReadFromJsonAsync<List<Habit>>() ?? new List<Habit>();
            }
            else
            {
                Console.WriteLine($"Failed to fetch habits: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error fetching habits: " + ex.Message);
        }

        isLoading = false;
    }

    private bool IsHabitSelected => selectedHabitId > 0;

    private async Task DeleteHabitConfirmed()
    {
        if (IsHabitSelected)
        {
            isLoading = true; 
            await Http.DeleteAsync($"api/habits/{selectedHabitId}");
            habits = habits.Where(h => h.Id != selectedHabitId).ToList();
            selectedHabitId = 0;
            isLoading = false; 
        }
    }
}
