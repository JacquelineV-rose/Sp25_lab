@page "/"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using HabitTracker.Models;

<h1>Welcome</h1>
<div class="grid-container">
    <div class="left-column">
        <div class="daily-section" style="display: flex; flex-direction: column; height: 100%;">
            <div class="habits-header">
                <h1>Daily Habits</h1>
            </div>
            @if (isLoadingHabits)
            {
                <p>Loading habits...</p>
            }
            else if (dailyHabits == null || !dailyHabits.Any())
            {
                <p>No data available</p>
            }
            else
            {
                <div style="flex-grow: 1; overflow-y: auto;">
                    @foreach (var habit in dailyHabits)
                    {
                        <div>@habit.Name - Completed: @(habit.Completed ? "Yes" : "No")</div>
                    }
                </div>
                <div>
                    <strong>Total:</strong> @dailyHabits.Count |
                    <strong>Completed:</strong> @dailyHabits.Count(h => h.Completed)
                </div>
            }
        </div>

        <div class="weekly-section" style="display: flex; flex-direction: column; height: 100%;">
            <div class="habits-header">
                <h1>Weekly Habits</h1>
            </div>
            @if (isLoadingHabits)
            {
                <p>Loading habits...</p>
            }
            else if (weeklyHabits == null || !weeklyHabits.Any())
            {
                <p>No data available</p>
            }
            else
            {
                <div style="flex-grow: 1; overflow-y: auto;">
                    @foreach (var habit in weeklyHabits)
                    {
                        <div>@habit.Name - Completed: @(habit.Completed ? "Yes" : "No")</div>
                    }
                </div>
                <div>
                    <strong>Total:</strong> @weeklyHabits.Count |
                    <strong>Completed:</strong> @weeklyHabits.Count(h => h.Completed)
                </div>
            }
        </div>

        <div class="monthly-section" style="display: flex; flex-direction: column; height: 100%;">
            <div class="habits-header">
                <h1>Monthly Habits</h1>
            </div>
            @if (isLoadingHabits)
            {
                <p>Loading habits...</p>
            }
            else if (monthlyHabits == null || !monthlyHabits.Any())
            {
                <p>No data available</p>
            }
            else
            {
                <div style="flex-grow: 1; overflow-y: auto;">
                    @foreach (var habit in monthlyHabits)
                    {
                        <div>@habit.Name - Completed: @(habit.Completed ? "Yes" : "No")</div>
                    }
                </div>
                <div>
                    <strong>Total:</strong> @monthlyHabits.Count |
                    <strong>Completed:</strong> @monthlyHabits.Count(h => h.Completed)
                </div>
            }
        </div>
    </div>

    <div class="right-column">
        <div class="motivation-section">
            <h2>Motivation</h2>
            @if (isLoadingMotivation)
            {
                <p>Loading quote...</p>
            }
            else
            {
                <p>@motivationQuote</p>
            }
            <button @onclick="ForceRefreshQuote" class="motivation-refresh-btn">
                <img src="refresh.png" alt="Refresh" />
            </button>
        </div>

        <div class="notes-section">
            <h2>Notes</h2>
            @if (isLoadingNote)
            {
                <p>Loading note...</p>
            }
            else
            {
                <textarea @bind="noteContent" rows="8" class="form-control"></textarea>
                <button @onclick="SaveNote" class="btn btn-success mt-2">Save</button>
                <p>@saveStatus</p>
            }
        </div>
    </div>
</div>

@code {
    private List<Habit> allHabits = new();
    private List<Habit> dailyHabits = new();
    private List<Habit> weeklyHabits = new();
    private List<Habit> monthlyHabits = new();

    private string noteContent = "";
    private string saveStatus = "";
    private string motivationQuote = "Loading motivation...";

    private bool isLoadingHabits = true;
    private bool isLoadingMotivation = true;
    private bool isLoadingNote = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadHabits();
        await LoadMotivationQuote();
        await LoadNote();
    }

    private async Task LoadHabits()
{
    try
    {
        var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
        if (string.IsNullOrEmpty(token))
        {
            Console.Error.WriteLine("No auth token found.");
            return;
        }

        var request = new HttpRequestMessage(HttpMethod.Get, "api/habits");
        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            allHabits = await response.Content.ReadFromJsonAsync<List<Habit>>() ?? new();
            dailyHabits = allHabits.Where(h => h.Frequency == "Daily").ToList();
            weeklyHabits = allHabits.Where(h => h.Frequency == "Weekly").ToList();
            monthlyHabits = allHabits.Where(h => h.Frequency == "Monthly").ToList();
        }
        else
        {
            Console.Error.WriteLine($"Failed to load habits: {response.StatusCode}");
        }
        finally
        {
            isLoadingHabits = false;
        }
    }
    catch (Exception ex)
    {
        Console.Error.WriteLine($"Error fetching habits: {ex.Message}");
    }
}

    private async Task LoadMotivationQuote()
    {
        try
        {
            var storedQuote = await JS.InvokeAsync<string>("localStorage.getItem", "motivationQuote");
            var storedDate = await JS.InvokeAsync<string>("localStorage.getItem", "motivationDate");
            var today = DateTime.Now.ToString("yyyy-MM-dd");

            if (!string.IsNullOrEmpty(storedQuote) && storedDate == today)
            {
                motivationQuote = storedQuote;
                return;
            }

            using var localHttp = new HttpClient { BaseAddress = new Uri(Navigation.BaseUri) };
            var quotes = await localHttp.GetFromJsonAsync<List<string>>("quotes.json");

            if (quotes != null && quotes.Any())
            {
                var rng = new Random();
                motivationQuote = quotes[rng.Next(quotes.Count)];
                await JS.InvokeVoidAsync("localStorage.setItem", "motivationQuote", motivationQuote);
                await JS.InvokeVoidAsync("localStorage.setItem", "motivationDate", today);
            }
            else
            {
                motivationQuote = "Stay motivated! No quotes available.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load motivation quotes: {ex.Message}");
            motivationQuote = "Stay motivated! (Error loading quotes)";
        }
        finally
        {
            isLoadingMotivation = false;
        }
    }

    private async Task ForceRefreshQuote()
    {
        await JS.InvokeVoidAsync("localStorage.removeItem", "motivationQuote");
        await JS.InvokeVoidAsync("localStorage.removeItem", "motivationDate");
        await LoadMotivationQuote();
    }


      private async Task LoadNote()
    {
        try
        {
            var note = await Http.GetFromJsonAsync<Note>("api/notes");
            noteContent = note?.Content ?? "";
        }
        catch (Exception ex)
        {
            Console.WriteLine("Failed to load note: " + ex.Message);
            noteContent = "";
        }
        finally
        {
            isLoadingNote = false;
        }
    }

    private async Task SaveNote()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/notes", new Note { Content = noteContent });
            saveStatus = response.IsSuccessStatusCode ? "Note saved!" : "Failed to save.";
        }
        catch (Exception ex)
        {
            saveStatus = "Error: " + ex.Message;
        }
    }
}
