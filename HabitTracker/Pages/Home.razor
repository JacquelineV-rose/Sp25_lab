@page "/"
@using MudBlazor
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IDialogService DialogService

<h1>Welcome</h1>

<MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@OpenCustomizeDialog">
    🎨 Customize
</MudButton>

<div class="grid-container">
    <div class="left-column">
        <div class="daily-section" style="background-color:@dailyColor;">
            <div class="habits-header">
                <h1>Daily Habits</h1>
            </div>
            @if (dailyHabits == null)
            {
                <p>Loading...</p>
            }
            else if (!dailyHabits.Any())
            {
                <p>No data available</p>
            }
            else
            {
                <div style="flex-grow: 1; overflow-y: auto;">
                    @foreach (var habit in dailyHabits)
                    {
                        <div>@habit.Name - Completed: @(habit.Completed ? "Yes" : "No")</div>
                    }
                </div>
                <div>
                    <strong>Total:</strong> @dailyHabits.Count |
                    <strong>Completed:</strong> @dailyHabits.Count(h => h.Completed)
                </div>
            }
        </div>

        <div class="weekly-section" style="background-color:@weeklyColor;">
            <div class="habits-header">
                <h1>Weekly Habits</h1>
            </div>
            @if (weeklyHabits == null)
            {
                <p>Loading...</p>
            }
            else if (!weeklyHabits.Any())
            {
                <p>No data available</p>
            }
            else
            {
                <div style="flex-grow: 1; overflow-y: auto;">
                    @foreach (var habit in weeklyHabits)
                    {
                        <div>@habit.Name - Completed: @(habit.Completed ? "Yes" : "No")</div>
                    }
                </div>
                <div>
                    <strong>Total:</strong> @weeklyHabits.Count |
                    <strong>Completed:</strong> @weeklyHabits.Count(h => h.Completed)
                </div>
            }
        </div>

        <div class="monthly-section" style="background-color:@monthlyColor;">
            <div class="habits-header">
                <h1>Monthly Habits</h1>
            </div>
            @if (monthlyHabits == null)
            {
                <p>Loading...</p>
            }
            else if (!monthlyHabits.Any())
            {
                <p>No data available</p>
            }
            else
            {
                <div style="flex-grow: 1; overflow-y: auto;">
                    @foreach (var habit in monthlyHabits)
                    {
                        <div>@habit.Name - Completed: @(habit.Completed ? "Yes" : "No")</div>
                    }
                </div>
                <div>
                    <strong>Total:</strong> @monthlyHabits.Count |
                    <strong>Completed:</strong> @monthlyHabits.Count(h => h.Completed)
                </div>
            }
        </div>
    </div>

    <div class="right-column">
        <div class="motivation-section" style="background-color:@motivationColor; position: relative;">
            <h2>Motivation</h2>
            <p>@motivationQuote</p>
        </div>

        <div class="notes-section" style="background-color:@notesColor;">
            <h2>Notes</h2>
        </div>
    </div>
</div>

@code {
    private List<HabitTracker.Models.Habit> allHabits = new();
    private List<HabitTracker.Models.Habit> dailyHabits = new();
    private List<HabitTracker.Models.Habit> weeklyHabits = new();
    private List<HabitTracker.Models.Habit> monthlyHabits = new();

    private string motivationQuote = "Loading motivation...";

    // Section colors - default values
    private string dailyColor = "rgb(234, 213, 252)";
    private string weeklyColor = "rgb(211, 230, 247)";
    private string monthlyColor = "rgb(209, 254, 244)";
    private string motivationColor = "rgb(247, 208, 208)";
    private string notesColor = "rgb(255, 222, 248)";

    protected override async Task OnInitializedAsync()
    {
        await LoadHabits();
        await LoadMotivationQuote();
    }

    private async Task LoadHabits()
    {
        try
        {
            allHabits = await Http.GetFromJsonAsync<List<HabitTracker.Models.Habit>>("api/habits") ?? new();
            dailyHabits = allHabits.Where(h => h.Frequency == "Daily").ToList();
            weeklyHabits = allHabits.Where(h => h.Frequency == "Weekly").ToList();
            monthlyHabits = allHabits.Where(h => h.Frequency == "Monthly").ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to fetch habits: {ex.Message}");
        }
    }

    private async Task LoadMotivationQuote()
    {
        try
        {
            var storedQuote = await JS.InvokeAsync<string>("localStorage.getItem", "motivationQuote");
            var storedDate = await JS.InvokeAsync<string>("localStorage.getItem", "motivationDate");
            var today = DateTime.Now.ToString("yyyy-MM-dd");

            if (!string.IsNullOrEmpty(storedQuote) && storedDate == today)
            {
                motivationQuote = storedQuote;
                return;
            }

            using var localHttp = new HttpClient { BaseAddress = new Uri(Navigation.BaseUri) };
            var quotes = await localHttp.GetFromJsonAsync<List<string>>("quotes.json");

            if (quotes != null && quotes.Any())
            {
                var rng = new Random();
                motivationQuote = quotes[rng.Next(quotes.Count)];

                await JS.InvokeVoidAsync("localStorage.setItem", "motivationQuote", motivationQuote);
                await JS.InvokeVoidAsync("localStorage.setItem", "motivationDate", today);
            }
            else
            {
                motivationQuote = "Stay motivated! No quotes available.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load motivation quotes: {ex.Message}");
            motivationQuote = "Stay motivated! (Error loading quotes)";
        }
    }

    private async Task OpenCustomizeDialog()
    {
        var parameters = new DialogParameters
        {
            { "DailyColor", dailyColor },
            { "WeeklyColor", weeklyColor },
            { "MonthlyColor", monthlyColor },
            { "MotivationColor", motivationColor },
            { "NotesColor", notesColor }
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Small, CloseButton = true, FullWidth = true };

        //It says there is errors sometimes but it kinda works
        var dialog = DialogService.Show<CustomizeDialog>("Customize Colors", parameters, options);
        var result = await dialog.Result;

        Console.WriteLine($"Dialog Data Type: {result.Data?.GetType()}");
        Console.WriteLine($"Dialog Data Value: {result.Data}");

        if (!result.Canceled && result.Data is Dictionary<string, string> updatedColors)
        {
            dailyColor = updatedColors.GetValueOrDefault("DailyColor", dailyColor);
            weeklyColor = updatedColors.GetValueOrDefault("WeeklyColor", weeklyColor);
            monthlyColor = updatedColors.GetValueOrDefault("MonthlyColor", monthlyColor);
            motivationColor = updatedColors.GetValueOrDefault("MotivationColor", motivationColor);
            notesColor = updatedColors.GetValueOrDefault("NotesColor", notesColor);
        }
        else
        {
            Console.WriteLine("Dialog was canceled or returned invalid data.");
        }
    }
}
