@page "/edithabits/edit"
@inject HttpClient Http
@using HabitTracker.Models
@using HabitTracker.Loaders

<h2 class="text-2xl font-bold mb-6">Edit a Habit</h2>

@if (isLoading)
{
    <LoadingScreen IsVisible="isLoading" />
}
else
{
    <div class="max-w-2xl bg-white p-6 rounded shadow">
        @if (habits == null)
        {
            <p>Loading habits...</p>
        }
        else if (!habits.Any())
        {
            <p>No habits found.</p>
        }
        else
        {
            <div class="max-h-64 overflow-y-auto border p-4 rounded shadow mb-4">
                <ul class="space-y-2">
                    @foreach (var habit in habits)
                    {
                        <li class="flex items-center space-x-4">
                            <input type="radio" id="@habit.Id" name="habitSelect" value="@habit.Id"
                                   @onchange="() => LoadHabitForEdit(habit)" />
                            <label for="@habit.Id" class="cursor-pointer">
                                <strong>@habit.Name</strong> - <span class="text-gray-600">@habit.Description</span>
                            </label>
                        </li>
                    }
                </ul>
            </div>

            @if (selectedHabit != null)
            {
                <div class="mt-4 space-y-4">
                    <input class="border rounded p-2 w-full" placeholder="Habit Name" @bind="selectedHabit.Name" />
                    <textarea class="border rounded p-2 w-full" placeholder="Description" @bind="selectedHabit.Description"></textarea>

                    <div>
                        <label class="block font-semibold">Frequency:</label>
                        <select class="border rounded p-2 w-full" @bind="selectedHabit.Frequency">
                            <option disabled value="">Select Frequency</option>
                            <option>Daily</option>
                            <option>Weekly</option>
                            <option>Monthly</option>
                        </select>
                    </div>

                    <div>
                        <label class="block font-semibold">Start Date:</label>
                        <input type="date" class="border rounded p-2 w-full" @bind="selectedHabit.StartDate" />
                    </div>

                    <div>
                        <label class="block font-semibold">End Date:</label>
                        <input type="date" class="border rounded p-2 w-full" @bind="selectedHabit.EndDate" />
                    </div>
                </div>
            }

            <button style="background-color: red; color: white; font-size: 20px; width: 100%; margin-top: 20px; display: block; z-index: 9999; position: relative;"
                    @onclick="SaveHabit"
                    disabled="@(!IsHabitSelected || isLoading)">
                @if (isLoading)
                {
                    <span>Saving...</span>
                }
                else
                {
                    <span>SAVE CHANGES</span>
                }
            </button>
        }
    </div>
}

@code {
    private List<Habit> habits = new();
    private Habit? selectedHabit;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadHabits();
    }

    private async Task LoadHabits()
    {
        try
        {
            habits = await Http.GetFromJsonAsync<List<Habit>>("api/habits") ?? new List<Habit>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching habits: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void LoadHabitForEdit(Habit habit)
    {
        selectedHabit = new Habit
        {
            Id = habit.Id,
            Name = habit.Name,
            Description = habit.Description,
            Frequency = habit.Frequency,
            UserID = habit.UserID,
            StartDate = habit.StartDate,
            EndDate = habit.EndDate,
            Completed = habit.Completed
        };
    }

    private bool IsHabitSelected => selectedHabit != null;

    private async Task SaveHabit()
    {
        if (selectedHabit != null)
        {
            isLoading = true;

            try
            {
                await Http.PutAsJsonAsync($"api/habits/{selectedHabit.Id}", selectedHabit);
                await LoadHabits();
                selectedHabit = null;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error saving habit: {ex.Message}");
            }
            finally
            {
                isLoading = false;
            }
        }
    }
}
