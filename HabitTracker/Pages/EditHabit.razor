@page "/edithabits/edit"
@inject HttpClient Http
@inject IJSRuntime JS
@using HabitTracker.Models

<h2 class="text-2xl font-bold mb-6">Edit a Habit</h2>

<div class="max-w-2xl bg-white p-6 rounded shadow">
    @if (habits == null)
    {
        <p>Loading habits...</p>
    }
    else if (!habits.Any())
    {
        <p>No habits found.</p>
    }
    else
    {
        <div class="max-h-64 overflow-y-auto border p-4 rounded shadow mb-4">
            <ul class="space-y-2">
                @foreach (var habit in habits)
                {
                    <li class="flex items-center space-x-4">
                        <input type="radio" id="@habit.Id" name="habitSelect" value="@habit.Id"
                               @onchange="() => LoadHabitForEdit(habit)" />
                        <label for="@habit.Id" class="cursor-pointer">
                            <strong>@habit.Name</strong> - <span class="text-gray-600">@habit.Description</span>
                        </label>
                    </li>
                }
            </ul>
        </div>

        @if (selectedHabit != null)
        {
            <div class="mt-4 space-y-4">
                <input class="border rounded p-2 w-full" placeholder="Habit Name" @bind="selectedHabit.Name" />
                <textarea class="border rounded p-2 w-full" placeholder="Description" @bind="selectedHabit.Description"></textarea>

                <div>
                    <label class="block font-semibold">Frequency:</label>
                    <select class="border rounded p-2 w-full" @bind="selectedHabit.Frequency">
                        <option disabled value="">Select Frequency</option>
                        <option>Daily</option>
                        <option>Weekly</option>
                        <option>Monthly</option>
                    </select>
                </div>

                <div>
                    <label class="block font-semibold">Start Date:</label>
                    <input type="date" class="border rounded p-2 w-full" @bind="selectedHabit.StartDate" />
                </div>

                <div>
                    <label class="block font-semibold">End Date:</label>
                    <input type="date" class="border rounded p-2 w-full" @bind="selectedHabit.EndDate" />
                </div>
            </div>
        }

        @* ✅ Force the button inside the card, visible, large red *@
        <button style="background-color: red; color: white; font-size: 20px; width: 100%; margin-top: 20px; display: block; z-index: 9999; position: relative;"
                @onclick="SaveHabit"
                disabled="@(!IsHabitSelected)">
            SAVE CHANGES
        </button>
    } @* ✅ Close ELSE here *@
</div>

@code {
    private List<Habit> habits = new();
    private Habit? selectedHabit;

    protected override async Task OnInitializedAsync()
{
    var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
    if (string.IsNullOrEmpty(token))
    {
        Console.Error.WriteLine("No auth token found.");
        habits = new List<Habit>();
        return;
    }

    var request = new HttpRequestMessage(HttpMethod.Get, "api/habits");
    request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

    var response = await Http.SendAsync(request);
    if (response.IsSuccessStatusCode)
    {
        habits = await response.Content.ReadFromJsonAsync<List<Habit>>() ?? new List<Habit>();
    }
    else
    {
        Console.Error.WriteLine($"Failed to load habits: {response.StatusCode}");
        habits = new List<Habit>();
    }
}

    private void LoadHabitForEdit(Habit habit)
    {
        selectedHabit = new Habit
        {
            Id = habit.Id,
            Name = habit.Name,
            Description = habit.Description,
            Frequency = habit.Frequency,
            UserID = habit.UserID,
            StartDate = habit.StartDate,
            EndDate = habit.EndDate,
            Completed = habit.Completed
        };
    }

    private bool IsHabitSelected => selectedHabit != null;

    private async Task SaveHabit()
{
    if (selectedHabit != null)
    {
        var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
        var request = new HttpRequestMessage(HttpMethod.Put, $"api/habits/{selectedHabit.Id}")
        {
            Content = JsonContent.Create(selectedHabit)
        };
        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            // Refresh habit list
            await OnInitializedAsync();
            selectedHabit = null;
        }
        else
        {
            Console.Error.WriteLine($"Failed to save habit: {response.StatusCode}");
        }
    }
}
}
