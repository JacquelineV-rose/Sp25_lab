@page "/habitlist"
@inject HttpClient Http
@inject IJSRuntime JS
@using HabitTracker.Models

<h3>Habit List</h3>

@if (habits == null)
{
    <p>Loading habits...</p>
}
else if (!habits.Any())
{
    <p>No habits found.</p>
}
else
{
    <table class="habit-table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Frequency</th>
                <th>Completed</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var habit in habits)
            {
                <tr>
                    <td>@habit.Name</td>
                    <td>@habit.Description</td>
                    <td>@habit.StartDate.ToShortDateString()</td>
                    <td>@habit.EndDate.ToShortDateString()</td>
                    <td>@habit.Frequency</td>
                    <td>@(habit.Completed ? "✅" : "❌")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Habit>? habits;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            if (string.IsNullOrEmpty(token))
            {
                Console.Error.WriteLine("No auth token found.");
                habits = new List<Habit>();
                return;
            }

            var request = new HttpRequestMessage(HttpMethod.Get, "api/habits");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                habits = await response.Content.ReadFromJsonAsync<List<Habit>>();
            }
            else
            {
                Console.Error.WriteLine($"Failed to load habits: {response.StatusCode}");
                habits = new List<Habit>();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching habits: {ex.Message}");
            habits = new List<Habit>();
        }
    }
}