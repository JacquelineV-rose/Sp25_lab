@page "/LoginRegAuth/login"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using System.Net.Http.Json
@using HabitTracker.Models



<div class="login-container">
    <h2>Login</h2>

    @if (!string.IsNullOrEmpty(Message))
    {
        <p style="color: red;">@Message</p>
    }

    <EditForm Model="@LoginModel" OnValidSubmit="@HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>Username:</label>
            <InputText @bind-Value="LoginModel.Username" class="form-control" placeholder="Enter username" />
        </div>

        <div>
            <label>Password:</label>
            <InputText @bind-Value="LoginModel.Password" type="password" class="form-control" placeholder="Enter password" />
        </div>

        <div class="button-container">
            <button class="btn btn-primary" type="submit">Login</button>
            <button class="btn btn-secondary" type="button" @onclick="GoToRegister">Register</button>
        </div>
    </EditForm>
</div>

@code {
    private UserLoginModel LoginModel = new();
    private string Message = "";

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5047/api/users/login", LoginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();

             
                await JS.InvokeVoidAsync("sessionStorage.setItem", "authToken", result?.Token);

                Message = "Login successful!";
                Navigation.NavigateTo("/habitlist");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync(); // ðŸ‘ˆ get full error
                Message = $"Login failed: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            Message = $"Error: {ex.Message}";
        }
    }

    private void GoToRegister()
    {
        Navigation.NavigateTo("/LoginRegAuth/register");
    }

    public class LoginResponse
    {
        public string Token { get; set; } = string.Empty;
    }
}
