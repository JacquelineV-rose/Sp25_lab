@page "/LoginRegAuth/register"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using HabitTracker.Models

<h2>Register</h2>

@if (!string.IsNullOrEmpty(Message))
{
    <p>@Message</p>
}

<EditForm Model="@RegisterModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="register-container">
        <div>
            <label>Email:</label>
            <InputText @bind-Value="RegisterModel.Email" type="email" class="form-control" placeholder="Enter email" />
        </div>



        <div>
            <label>Create Username:</label>
            <InputText @bind-Value="RegisterModel.Username" class="form-control" placeholder="Enter username" />
        </div>

    <div>
            <label>Enter Email:</label>
            <InputText @bind-Value="RegisterModel.Email" type="email" class="form-control"
                placeholder="Enter email" />
        </div>


        <div>
            <label>Create Password:</label>
            <InputText @bind-Value="RegisterModel.Password" type="password" class="form-control"
                placeholder="Enter password" />
        </div>

        <div>
            <label>Reenter Password:</label>
            <InputText @bind-Value="RegisterModel.ConfirmPassword" type="password" class="form-control"
                placeholder="Reenter password" />
        </div>

        <div>
            <button class="btn btn-primary" type="submit">Create</button>
        </div>
    </div>
</EditForm>

@code {
    private UserRegisterModel RegisterModel = new();
    private string ConfirmPassword = string.Empty;
    private string Message = string.Empty;

    private async Task HandleRegister()
    {
        if (RegisterModel.Password != RegisterModel.ConfirmPassword)
        {
            Message = "Passwords do not match.";
            return;
        }

        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5047/api/users/register", RegisterModel);

            if (response.IsSuccessStatusCode)
            {
                Message = "Registration successful!";
                await JS.InvokeVoidAsync("sessionStorage.setItem", "authToken", "");
                Navigation.NavigateTo("/LoginRegAuth/login");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync(); // ðŸ‘ˆ get full error
                Message = $"Registration failed: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            Message = $"An error occurred: {ex.Message}";
        }
    }
}
