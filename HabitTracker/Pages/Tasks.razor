@page "/habits/{type}"
@inject HttpClient Http
@using HabitTracker.Models
@using HabitTracker.Loaders


<h3>@(type) Habits</h3>

@if (isLoading)
{
    <LoadingScreen IsVisible="isLoading" />
}
else if (habits == null || habits.Count == 0)
{
    <p>No habits found.</p>
}
else
{
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>User ID</th>
                <th>Habit</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var habit in habits)
            {
                <tr>
                    <td>@habit.Id</td>
                    <td>@habit.UserID</td>
                    <td>@habit.Name</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public string type { get; set; } = string.Empty;
    private List<Habit>? habits;
    private bool isLoading = true; 

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            isLoading = true; 
            habits = await Http.GetFromJsonAsync<List<Habit>>($"http://localhost:5047/api/habits?frequency={type}");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching habits: {ex.Message}");
            habits = new List<Habit>();
        }
        finally
        {
            isLoading = false; 
        }
    }
}
